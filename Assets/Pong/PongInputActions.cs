//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Pong/PongInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PongInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PongInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PongInputActions"",
    ""maps"": [
        {
            ""name"": ""Pong"",
            ""id"": ""6b1d9e1c-0a38-4dec-8e6f-05e7963252ae"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""da9196cb-2048-46d0-8b7c-23c5a132cc39"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6c38d3b6-5dd7-4b98-bc10-902558aadb8a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1e7b9dab-4e13-4a10-bbc3-46be2ecd643b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""83402e99-ccd5-4700-ae42-497d8f5460f9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Pong
        m_Pong = asset.FindActionMap("Pong", throwIfNotFound: true);
        m_Pong_Movement = m_Pong.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Pong
    private readonly InputActionMap m_Pong;
    private List<IPongActions> m_PongActionsCallbackInterfaces = new List<IPongActions>();
    private readonly InputAction m_Pong_Movement;
    public struct PongActions
    {
        private @PongInputActions m_Wrapper;
        public PongActions(@PongInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Pong_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Pong; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PongActions set) { return set.Get(); }
        public void AddCallbacks(IPongActions instance)
        {
            if (instance == null || m_Wrapper.m_PongActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PongActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPongActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPongActions instance)
        {
            if (m_Wrapper.m_PongActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPongActions instance)
        {
            foreach (var item in m_Wrapper.m_PongActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PongActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PongActions @Pong => new PongActions(this);
    public interface IPongActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
